"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from speakeasy import utils
from typing import Dict, List, Optional


class DepthStyle(str, Enum):
    ORIGINAL = 'original'
    FLAT = 'flat'
    NESTED = 'nested'
    DEEP = 'deep'


class Style(str, Enum):
    STANDARDIZE = 'standardize'
    RESOURCE = 'resource'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Opts:
    depth_style: Optional[DepthStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('depth_style'), 'exclude': lambda f: f is None }})
    style: Optional[Style] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('style'), 'exclude': lambda f: f is None }})
    



@dataclasses.dataclass
class Schema:
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})
    file_name: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'schema' }})
    



@dataclasses.dataclass
class SuggestOperationIDsRequestBody:
    r"""The schema file to upload provided as a multipart/form-data file segment."""
    schema: Schema = dataclasses.field(metadata={'multipart_form': { 'file': True }})
    opts: Optional[Opts] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'opts', 'json': True }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SuggestOperationIDsSuggestion:
    r"""OK"""
    operation_ids: Dict[str, List[str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation_ids') }})
    



@dataclasses.dataclass
class SuggestOperationIDsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    suggestion: Optional[SuggestOperationIDsSuggestion] = dataclasses.field(default=None)
    r"""OK"""
    

