"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.errors import error as errors_error
from ...models.shared import getrevisionsresponse as shared_getrevisionsresponse
from typing import Optional


@dataclasses.dataclass
class GetRevisionsRequest:
    namespace_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'namespace_id', 'style': 'simple', 'explode': False }})
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""Token to retrieve the next page of results"""
    



@dataclasses.dataclass
class GetRevisionsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    error: Optional[errors_error.Error] = dataclasses.field(default=None)
    r"""Default error response"""
    get_revisions_response: Optional[shared_getrevisionsresponse.GetRevisionsResponse] = dataclasses.field(default=None)
    r"""OK"""
    

