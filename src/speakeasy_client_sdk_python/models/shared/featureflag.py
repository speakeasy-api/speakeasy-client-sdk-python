"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .workspacefeatureflag import WorkspaceFeatureFlag
from datetime import datetime
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from speakeasy_client_sdk_python.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from speakeasy_client_sdk_python.utils import validate_open_enum
from typing_extensions import Annotated, NotRequired, TypedDict


class FeatureFlagTypedDict(TypedDict):
    r"""A feature flag is a key-value pair that can be used to enable or disable features."""

    feature_flag: WorkspaceFeatureFlag
    r"""enum value workspace feature flag"""
    trial_ends_at: NotRequired[Nullable[datetime]]


class FeatureFlag(BaseModel):
    r"""A feature flag is a key-value pair that can be used to enable or disable features."""

    feature_flag: Annotated[
        WorkspaceFeatureFlag, PlainValidator(validate_open_enum(False))
    ]
    r"""enum value workspace feature flag"""

    trial_ends_at: OptionalNullable[datetime] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["trial_ends_at"]
        nullable_fields = ["trial_ends_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
