"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from speakeasy import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class User:
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})
    r"""Indicates whether the user is an admin."""
    confirmed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmed') }})
    r"""Indicates whether the user has been confirmed."""
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""Timestamp of the user's creation."""
    display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name') }})
    r"""Display name of the user."""
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Email address of the user."""
    email_verified: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_verified') }})
    r"""Indicates whether the email address has been verified."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier for the user."""
    last_login_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_login_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""Timestamp of the last login."""
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""Timestamp of the user's last update."""
    whitelisted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whitelisted') }})
    r"""Indicates whether the user has been whitelisted."""
    default_workspace_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_workspace_id'), 'exclude': lambda f: f is None }})
    r"""Identifier of the default workspace."""
    github_handle: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_handle'), 'exclude': lambda f: f is None }})
    r"""GitHub handle of the user."""
    photo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photo_url'), 'exclude': lambda f: f is None }})
    r"""URL of the user's photo."""
    

