"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import clievent as shared_clievent
from ...models.shared import interactiontype as shared_interactiontype
from typing import List, Optional


@dataclasses.dataclass
class SearchWorkspaceEventsGlobals:
    workspace_id: Optional[str] = dataclasses.field(default=None, metadata={'path_param': { 'field_name': 'workspaceID', 'style': 'simple', 'explode': False }})
    



@dataclasses.dataclass
class SearchWorkspaceEventsRequest:
    generate_gen_lock_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'generate_gen_lock_id', 'style': 'form', 'explode': True }})
    r"""A specific gen lock ID for the events."""
    interaction_type: Optional[shared_interactiontype.InteractionType] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interaction_type', 'style': 'form', 'explode': True }})
    r"""Specified interaction type for events."""
    lint_report_digest: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lint_report_digest', 'style': 'form', 'explode': True }})
    r"""Unique identifier of the lint report digest."""
    openapi_diff_report_digest: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'openapi_diff_report_digest', 'style': 'form', 'explode': True }})
    r"""Unique identifier of the openapi diff report digest."""
    source_revision_digest: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source_revision_digest', 'style': 'form', 'explode': True }})
    r"""Unique identifier of the source revision digest."""
    workspace_id: Optional[str] = dataclasses.field(default=None, metadata={'path_param': { 'field_name': 'workspaceID', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the workspace."""
    



@dataclasses.dataclass
class SearchWorkspaceEventsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    cli_event_batch: Optional[List[shared_clievent.CliEvent]] = dataclasses.field(default=None)
    r"""Success"""
    

